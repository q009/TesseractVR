////////////////////////////////////////////////
//
// UI shaders
//
////////////////////////////////////////////////

lazyshader 0 "modelpreview" [
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    varying vec2 texcoord0;
    flat varying int instanceID;

    void main(void)
    {
        gl_Position = vvertex;
        texcoord0 = vtexcoord0; 
        instanceID = gl_InstanceID;
    }
] [
    @(gfetchdefs [tex0 tex1 tex3])
    uniform vec3 camera;
    uniform mat4 worldmatrix[RENDER_VIEWS];
    uniform vec4 lightscale;
    uniform vec3 sunlightdir;
    uniform vec3 sunlightcolor;
    uniform float cutout;
    varying vec2 texcoord0;
    flat varying int instanceID;
    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 normal = gfetch(tex1, texcoord0);
        if(normal.x + normal.y == cutout) discard;

        normal.xyz = normal.xyz*2.0 - 1.0;
        @(if $usepacknorm [result [
            float glowscale = dot(normal.xyz, normal.xyz);
            normal.xyz *= inversesqrt(glowscale);
            @(unpacknorm glowscale)
        ]] [result [
           #define glowscale normal.a
        ]])

        vec4 diffuse = gfetch(tex0, texcoord0);
        vec3 glow = diffuse.rgb * (1.0 - glowscale);
        diffuse.rgb *= glowscale;

        vec3 light = diffuse.rgb * lightscale.rgb;
        light += glow.rgb * lightscale.a;

        float sunfacing = dot(sunlightdir, normal.xyz);
        if(sunfacing > 0.0)
        {
            @(gdepthunpack depth [gfetch(tex3, texcoord0)] [
                vec3 pos = (worldmatrix[instanceID] * vec4(depth*texcoord0, depth, 1.0)).xyz;
            ] [
                vec4 pos = worldmatrix[instanceID] * vec4(texcoord0, depth, 1.0);
                pos.xyz /= pos.w;
            ])
            @(unpackspec)
            float sunspec = pow(clamp(sunfacing*facing - dot(camdir, sunlightdir), 0.0, 1.0), gloss) * specscale;
            light += (diffuse.rgb*sunfacing + sunspec) * sunlightcolor;
        }

        fragcolor.rgb = light;
        fragcolor.a = 1.0;
    }
]

///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader 0 "hud" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor = colorscale * color;
    }
]

shader 0 "hudtext" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        float dist = texture2D(tex0, texcoord0).r;
        float border = smoothstep(textparams.x, textparams.y, dist);
        float outline = smoothstep(textparams.z, textparams.w, dist);
        fragcolor = vec4(colorscale.rgb * outline, colorscale.a * border);
    }
]

shader 0 "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader 0 "hudnotexture" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 hudmatrix;
    varying vec4 color;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        color = vcolor;
    }
] [
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color;
    }
]

shader 0 "hudrect" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        texcoord0 = vtexcoord0; 
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * texture2DRect(tex0, texcoord0);
    }
]

shader 0 "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 color;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        texcoord0 = vtexcoord0;
        color = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color * texture3D(tex0, texcoord0);
    }
]

shader 0 "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        @(stereoclip)
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * textureCube(tex0, texcoord0);
    }
]
